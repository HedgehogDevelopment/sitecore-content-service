<#@ template language="C#" #>
<#@ output encoding="utf-8"#>
<#@ include file="Helpers.tt" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="HedgehogDevelopment.CodeGeneration.Extensions.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HedgehogDevelopment.CodeGeneration.Extensions" #>
<#@ import namespace="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models" #>
<#@ parameter name="Model" type="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models.SitecoreItem" #>
<#@ parameter name="DefaultNamespace" type="System.String" #>
<#
SitecoreTemplate template = Model as SitecoreTemplate;
if (template == null)
{
	return "";
}
#>
namespace <#= GetNamespace("", template)#>
{
	/// <summary>
	///	<#= template.Name #>
	///	<para><#= template.SitecoreFields.GetValue("__Short description")#></para>
	///	<para>Path: <#= template.Path #></para>	
	///	<para>ID: <#= template.ID.ToString() #></para>	
	///	<remarks>Generated by Team Development for Sitecore</remarks>
	///	</summary>
	public partial class <#= template.Name.AsClassName() #>Item : <#=GetObjectInheritanceDefinition("", template, false, (string s) => s + "Item")#>
	{
<#foreach(SitecoreField field in GetFieldsForTemplate(template, false)){
	string fieldType = GetFieldType(field);
	#>
<#if (fieldType == null){#>
			//Could not find Field Type for <#=field.Type#>
<#}else{#>
		/// <summary>
		///	The <#=field.Name#> field.
		///	<para><#= field.SitecoreFields.GetValue("__Short description")#></para>
		///	<para>Field Type: <#=field.Type#></para>		
		///	<para>Field ID: <#=field.ID.ToString()#></para>
		///	<remarks>Generated by Team Development for Sitecore</remarks>
		/// </summary>
		public <#=fieldType#> <#= GetPropertyName(field) #>  {get; set;}

<#}}#>	
	}
}
<#+
/// <summary>
/// Gets the inheritance string for the generated template
/// </summary>
/// <param name="defaultNamespace">The default namespace.</param>
/// <param name="template">The template to get the bases for.</param>
/// <param name="nameFunc">The function to run the base templates names through.</param>
/// <returns></returns>
public static string GetObjectInheritanceDefinition(string defaultNamespace, SitecoreTemplate item, bool includeLeadingComma, Func<string, string> nameFunc)
{
	if (item.BaseTemplates.Count > 0)
	{
		return string.Concat(includeLeadingComma ? ", " : "",
								item.BaseTemplates
								.Select( bt => GetFullyQualifiedName(defaultNamespace, bt, nameFunc)) // select the name of the template with an 'I' prefix
								.Aggregate( (total,next) => total + ", " + next) // basically a string.join(string[], '')
							);
	}
	return "HedgehogDevelopment.Scaas.Content.ContentItem";
}

// Gets the Content field type for the Sitecore field
public static string GetFieldType(SitecoreField field)
{
	if (field != null && field.Type != null)
    {
		switch(field.Type.ToLower())
		{			
			case "checkbox":
				return "bool";

			case "date":
			case "datetime":
				return "DateTime";

			case "number":	
				return "float";

			case "integer":
				return "int";

			case "treelist":
			case "treelistex":
			case "checklist":
			case "droplist":
			case "grouped droplist":
			case "multilist":
                return "MultiReferenceField";

			case "grouped droplink":
			case "droplink":
			case "lookup":
			case "droptree":
			case "reference":
			case "tree":
				return "ReferenceField";

			case "file":
				return "MediaField";

			case "image":
				return "ImageField";

			case "general link":
				return "LinkField";

			case "rich text":
			case "html":
			case "single-line text":
			case "multi-line text":
			case "text":
			case "memo":
				return "string";

			default:
				return null;
		}
	}
    else 
	{
	   throw new Exception("There is no 'Type' field on the " + field.Name + " field.");
	}
} 
#>